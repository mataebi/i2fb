#!/bin/bash
# i2fb is a wrapper for ImageMagicks "convert" command and allows to easily
# render a wide varienty of image formats and send the result to the frame-
# buffer of a Raspberry Pi. It takes care of screen / framebuffer resolution
# and screen # rotation set using the display_rotate option in /boot/config.txt
#
# (C) Matthias Aebi, August 2022

I2FB_VERSION=1.1.1

FILL=""   # no screen filling
ROTATE="" # no rotation
ZOOM=""   # no zooming
FBUF="/dev/fb0"
COLOR="gray"
DEBUG="1"

CONVERT="/usr/bin/convert"
IDENTIFY="/usr/bin/identify"

# While this script works using space on the SD card to store the
# images to be shown, storing them on a RAM disk speeds things up
PLAYDIR=/dev/shm/i2fb

# Intermediate storage is not really time critical
TMPDIR=/tmp/i2fb

[ ! -z $DEBUG ] && echo "i2fb: $0 $@"

#----------------------------------------------------------------------------
 function usage {
#----------------------------------------------------------------------------
   echo "Usage i2fb V${I2FB_VERSION}: i2fb [options] <image-filepath>" >&2
   exit 1
} # usage

#----------------------------------------------------------------------------
 function help {
#----------------------------------------------------------------------------
  echo "
Help for i2fb V${I2FB_VERSION}:

  i2fb [options] <image-filepath>

  -b | --buffer fb0 | fb1

    Specify the framebuffer to be used for displaying the image common
    fb0is usually connected to the HDMI output while fd1is used for TFT
    screens. Default is fb0.
    CSS color format.

  -c | --color <color>

    The color to be used to fill areas not covered by the image. Use any
    common CSS color format to specify the color to be used. Default is
    gray.

  -f | --fill <fill-target>

    image   Makes sure the entire image is shown while using the available
            size of the screen as much as possible

    width   Makes sure the image to be shown fills the entire width of the
            screen taking any rotation configured into account. The image
            will be centered on the screen and excess parts that can not
            be shown at the zoom factor needed to fill the screen in width
            will not be visible.

    height  Makes sure the image to be shown fills the entire height of
            the screen taking any rotation configured into account. The
            image will be centered on the screen and excess parts that
            can not be shown at the zoom factor needed to fill the screen
            in height will not be visible. 

    screen  Makes sure the image to be shown fills the entire height and
            width of the screen taking any rotation configured into account.
            The image will be centered on the screen and excess parts that
            can not be shown at the zoom factor needed to fill height and
            width of the screen will not be visible.
  
  -h | --help

    Show this information about i2fb parameters

  -r | --rotate <degrees>

    Rotate the image clockwise after taking into account any rotation
    configured for the screen in /boot/config.txt using the
    'display_rotate' option. Default is 0.
 
  -z | --zoom <percentage> | <bounding-box>

    Zoom the image by the percentage given or make sure the image fits into
    the bounding box given. The image will be centered on the screen and
    excess parts that can not be shown will not be visible. Default is 100%"

  echo
  exit 0
} # help

#----------------------------------------------------------------------------
 function get_dimensions {
#----------------------------------------------------------------------------
# Get the height and (actual) width of the image and the framebuffer
  FBDEPTH=$(/usr/bin/fbset | grep geometry | tr -s ' ' | cut -d' ' -f7)

  FBWIDTH=$(/usr/bin/fbset | grep geometry | tr -s ' ' | cut -d' ' -f3)
  FBHEIGHT=$(/usr/bin/fbset | grep geometry | tr -s ' ' | cut -d' ' -f4)

  if [ $FBWIDTH -gt $FBHEIGHT ]; then
    AFBWIDTH=$FBWIDTH
    AFBHEIGHT=$(echo "$(cat $FBUF | wc -c)/$FBWIDTH/($FBDEPTH/8)" | bc)
  else
    AFBWIDTH=$(echo "$(cat $FBUF | wc -c)/$FBHEIGHT/($FBDEPTH/8)" | bc)
    AFBHEIGHT=$FBHEIGHT
  fi

  IMGHEIGHT=$(cat "$IMAGE" | $IDENTIFY -format '%h' -[0])
  IMGWIDTH=$(cat "$IMAGE" | $IDENTIFY -format '%w' -[0])

  [ ! -z $DEBUG ] && echo "i2fb: $FBHEIGHT $AFBHEIGHT / $FBWIDTH $AFBHEIGHT / $FBDEPTH / $IMGHEIGHT $IMGWIDTH"
} # get_dimensions

#----------------------------------------------------------------------------
 function test_imagemagick {
#----------------------------------------------------------------------------
  dpkg -s imagemagick > /dev/null 2>&1;
  if [ $? -gt 0 ]; then
    echo "Imagemagick must be installed to use i2fb - use 'sudo apt install imagemagick' to do so" >&2
    exit 1
  fi
} # test_imagemagick

#----------------------------------------------------------------------------
 function test_image {
#----------------------------------------------------------------------------
# Make sure we got an image file IM can handle
  [ -z $IMAGE ] && usage
  cat "$IMAGE" | $IDENTIFY - >/dev/null 2>&1
  if [ $? -gt 0 ]; then
    echo "$IMAGE is not an image file recognized by ImageMagick" >&2
    exit 1
  fi
} # test_image

#----------------------------------------------------------------------------
 function get_parameters {
#----------------------------------------------------------------------------
  while getopts "b:c:f:hr:z:-:" optchar; do
    case $optchar in
      b)
        FBUF="/dev/$OPTARG";;

      c)
        COLOR="$OPTARG";;

      f)
        FILL="$OPTARG";;

      h)
        help;;

      r)
        ROTATE="$OPTARG";;

      z)
        ZOOM="$OPTARG";;

      -)
        case "${OPTARG}" in
          buffer)
            FBUF="/dev/${!OPTIND}";;

          color)
            COLOR=${!OPTIND};;

          fill)
            FILL=${!OPTIND};;

          help)
            help;;

          rotate)
            ROTATE=${!OPTIND};;

          zoom)
            ZOOM=${!OPTIND};;

          *) usage;;
        esac
        ((OPTIND=OPTIND+1));;

      \? ) usage;;
    esac
  done
  shift $((OPTIND -1))

  # Get the last argument supposed to be the path of the image file if any
  IMAGE=$1
} # get_parameters

#----------------------------------------------------------------------------
 function test_parameters {
#----------------------------------------------------------------------------
# Make sure all parameters are correct
  if [[ ! $FBUF =~ ^(/dev/fb0|/dev/fb1)$ ]]; then
    echo "Buffer (-b) must be 'fb0' or 'fb1'" >&2
    exit 1
  fi

  if [ ! -w $FBUF ]; then
    echo "Framebuffer $FBUF is not available"
    exit 1
  fi

  if [[ ! $FILL =~ ^(|image|width|height|screen)$ ]]; then
    echo "Fill mode (-f) must be 'image', 'width', 'height' or 'screen'" >&2
    exit 1
  fi

  if [[ ! $ROTATE =~ ^[0-9]*$ ]]; then
    echo "Rotation (-r) must be a number" >&2
    exit 1
  fi

  if [[ ! $ZOOM =~ ^(|[0-9]+%|[0-9]+x[0-9]+)$ ]]; then
    echo "Zoom (-z) must be <percentage>% or <height>x<width>" >&2
    exit 1
  fi
} # test_parameters

#----------------------------------------------------------------------------
 function create_command {
#----------------------------------------------------------------------------
  # Please note that the order of the parameters is relevant
  CMD="$CONVERT"

  [ ! -z "$ROTATE" ] && CMD="$CMD -rotate $ROTATE"

  if [ $FILL ]; then

    case ${FILL} in
      image)
        zoom="$FBWIDTH"x"$FBHEIGHT";;

      width)
        zoom="$FBWIDTH"x"999999";;

      height)
        zoom="999999"x"$FBHEIGHT";;

      screen)
        local hzoom=$(echo "100*$FBHEIGHT/$IMGHEIGHT+1" | bc)
        local wzoom=$(echo "100*$FBWIDTH/$IMGWIDTH+1" | bc)
        if [ $hzoom -gt $wzoom ]; then
          zoom="$hzoom%"
        else
          zoom="$wzoom%"
        fi;;
    esac
    CMD="$CMD -resize \"$zoom\""

    [ $ZOOM ] && echo "Ignoring --zoom $ZOOM as --fill $FILL is used instead"
  else
    [ ! -z "$ZOOM" ] && CMD="$CMD -resize $ZOOM"
  fi
} # create_command

#----------------------------------------------------------------------------
 function clear_buffer {
#----------------------------------------------------------------------------
  dd if=/dev/zero of=$FBUF > /dev/null 2>&1
} # clear_buffer

#----------------------------------------------------------------------------
 function hide_cursor {
#----------------------------------------------------------------------------
  [ -w /sys/class/graphics/fbcon/cursor_blink ] && echo 0 > /sys/class/graphics/fbcon/cursor_blink
} # hide_cursor

#----------------------------------------------------------------------------
 function show_animation {
#----------------------------------------------------------------------------
  rm -rf $TMPDIR; mkdir -p $TMPDIR

  # Extract all the images from the animation
  [ ! -z $DEBUG ] && echo "i2fb: Extracting $COUNT frames from animation image to $TMPDIR"
  cat "$IMAGE" | nice $CONVERT - -coalesce +adjoin bgra:$TMPDIR/img%d.bgra

  # Extract the delay for each frame in (fractions) of seconds
  [ ! -z $DEBUG ] && echo "i2fb: Reading delay for each frame"
  readarray -t <<<$(identify -verbose "$IMAGE" | grep Delay | rev | cut -d" " -f1 | rev | tr 'x' '*' | sed -e 's/$/\/10000/' | bc -l) DELAYS

  CMD="$CMD -background \"$COLOR\" -extent ${AFBWIDTH}x${AFBHEIGHT} \
       -gravity center -size ${IMGWIDTH}x${IMGHEIGHT} -depth 8"

  [ ! -z $DEBUG ] && echo "i2fb: Clearing play directory at $PLAYDIR"
  rm -rf $PLAYDIR; mkdir -p $PLAYDIR; N=0

  # Convert and show a «poster image» before starting to work on the animation
  [ ! -z $DEBUG ] && echo "i2fb: Rendering poster image from $TMPDIR/img$N.bgra to $PLAYDIR/img$N.bgra"
  [ ! -z $DEBUG ] && echo "i2fb: $CMD bgra:$TMPDIR/img$N.bgra bgra:$PLAYDIR/img$N.bgra"
  eval "$CMD bgra:$TMPDIR/img$N.bgra bgra:$PLAYDIR/img$N.bgra"

  [ ! -z $DEBUG ] && echo "i2fb: Writing poster image from $PLAYDIR/img$N.bgra to framebuffer"
  cat $PLAYDIR/img$N.bgra > $FBUF

  # Render each image based on the parameters passed
  [ ! -z $DEBUG ] && echo "i2fb: Converting $COUNT animation images from $TMPDIR to $PLAYDIR"
  for N in $(seq 1 $COUNT); do
    [ ! -z $DEBUG ] && echo "i2fb: Rendering image $TMPDIR/img$N.bgra to $PLAYDIR/img$N.bgra"
    eval "nice $CMD bgra:$TMPDIR/img$N.bgra bgra:$PLAYDIR/img$N.bgra"
  done

  # Exit if we have no files to play
  if [ ! -r $PLAYDIR/img0.bgra ]; then
    [ ! -z $DEBUG ] && echo "i2fb: Aborting: No images to play at $PLAYDIR"
    exit 1
  fi

  # Play all images prepared in the PLAYDIR
  [ ! -z $DEBUG ] && echo "i2fb: Playing $COUNT animation images from $PLAYDIR"
  while [ 1 ]; do
    for N in $(seq 0 $COUNT); do
      nice cat $PLAYDIR/img${N}.bgra > $FBUF
      [ -n "${DELAYS[$N]}" ] && sleep ${DELAYS[$N]}
    done
  done
} # show_animation

#----------------------------------------------------------------------------
# main
#----------------------------------------------------------------------------
  test_imagemagick

  get_parameters $@
  test_parameters
  test_image

  get_dimensions
  create_command

  # clear_buffer
  hide_cursor

  COUNT=$(( $(cat "$IMAGE" | $IDENTIFY - | wc -l) - 1))
  if [ $COUNT -gt 1 ]; then
    show_animation
  else
    # Complete and run the command
    CMD="cat "$IMAGE" | $CMD -background \"$COLOR\" -extent ${AFBWIDTH}x${AFBHEIGHT} -gravity center - bgra:$FBUF"
    eval "$CMD"
  fi
